/**********************************************************************************  
** Program name:	Rogue-like Survival	 			- Final Project -
** Author:  		Brian Tsui
** Date:  			06/12/2017
** Description: 	This is the Header code for main game class.
					This class sets the gameflow and handles some logical mechanics.

					This game design is inspired by one of the tutorial demo projects for Unity3D.
					https://unity3d.com/learn/tutorials/s/2d-roguelike-tutorial
					
					The game takes in W A S D and 1 2 3 4 input to control.
					Move around the 2D map to collect item and get to the Goal.
					Available actions are dynamically responsive to surrounding blocks.
					Every step loses health, and zombies will chase you down.
					Every level's map is randomly generated (with some rules).
					Health points and inventory items are carried down to next level.
					Try to survive as many levels as possible.
					
					A graphical instruction manual is displayed at the beginning.
					
					Most display messages are in Displayer class.
					Every level is randomly generated by Mapper class.
					The 2D map is an abstract utilizing ListNode (from lab 6).
					GameObjs defines game object as structs. 
										
**********************************************************************************/
#ifndef GAME_HPP
#define GAME_HPP
#include "Die.hpp"
#include "SpaceList.hpp"
#include "Space.hpp"
#include "Clear.hpp"
#include "Bread.hpp"
#include "Water.hpp"
#include "Hammer.hpp"
#include "Key.hpp"
#include "Gate.hpp"
#include "Edge.hpp"
#include "Wall.hpp"
#include <string>
#include <iostream>
#include "GameObjs.hpp"
#include "Displayer.hpp"
#include "Mapper.hpp"


using namespace std;

class Game
{
	private:

		// Characters properties
			Player * player;
			Container INV;				// Inventory 
			Enemy * zombieA;
			Enemy * zombieB;
			int playerHP;
			int zombie_damage;
			int maxItem;				// Max number of each item can be carried in Inventory

		
		// Stage properties
			SpaceList ** stage;	
			int dimension;		
			int level;
			bool stage_clear;

		// Space pointers
			Space * select;
			Space * temp;
			Space * start;
			Space * goal;
			
			
		// Map builder
			Mapper mapper;
			
		// Displayer
			Displayer dsp;
			
		// Random number generator
			Die dice;
			
		// Validation
			Validate val;
		
	public:
		// Constructor
			Game(int);
			
		// Menu
			bool promptPlay();
			bool promptContinue();
						
		// Main Gameflow
			void run();

		// Setup
			void setup();				// Create 2D map and Sets objects on the stage
		
		// Detectors
			bool hasHP();				// Returns false if player is dead
			
		//std::string search();		// Returns any object found on the new location

		// Player action procedure
			void act(); 				// Prompts player to take the next move
			
		// Auto update procedures
			void update();				// HP changes, check for item, prompt action, and prints report (updates map display)
			void item_handler(bool, std::string);
			void enemy_handler();
			
		// Mechanics
			void eat(std::string); 		// Use an item to recover HP
			int enemy_update(Enemy *);	// Updates enemy position and perform attack if applicable
			bool enemy_move(Enemy*, std::string);	// Enemy move process, checks of obstacles, handles exceptions and return true when completed
			bool enemy_target(Enemy*);	// Returns true if Player is within Range
			bool pickup(std::string);	// Put found object in the inventory (INV)
			
		// Post-process
			void reset();				// Resets all the stats
			void cleanup();				// Cleans up memory
			void hold();				// Prompt wait
			void hold(std::string);
		
		// Destructor 
			~Game();
		
		
		
};

#endif